#/bin/sh -e

function rollback
{
    local DIRS=$(ls releases/ | sort | grep -B1 $(readlink current | sed s@releases/@@))
    local N=$(echo "$DIRS" | wc -l)
    if [ $N -ne 2 ]
    then
        echo Cannot rollback
        exit 1
    fi
    local RELEASE=$(echo "$DIRS" | head -n 1)
    echo Rollbacking to $RELEASE
    ln -sfn releases/$RELEASE current
    hook switch.after $RELEASE
}

function clean
{
    local NUM=$1
    local DIRS=$(ls releases/ | sort | grep -v $(readlink current | sed s@releases/@@) | head -n -$NUM)
    for d in $DIRS
    do
        rm -rf releases/$d
    done
}

function hook
{
    local NAME=$1
    shift
    test -f ./.deploy.$NAME && {(. ./.deploy.$NAME $@) || exit 1;}
}

function do_links
{
    if [ -f .deploy.links ]
    then
        while read INSHARED INRELEASE
        do
            if [ -z "$INSHARED" ]
            then
                continue
            elif [ -z "$INRELEASE" ]
            then
                INRELEASE="$INSHARED"
            fi
            mkdir -p $(dirname $PWD/releases/$1/$INRELEASE)
            ln -s $PWD/shared/$INSHARED $PWD/releases/$1/$INRELEASE
        done <.deploy.links
    fi
}

ARGS=$(getopt d:i:rc: $*)
set -- $ARGS
while true
do
    case "$1" in
        -d)
            cd $2
            shift 2
        ;;
        -i)
            if [ -f .deployrc ]
            then
                echo Cannot init: .depoyrc already exists
                exit 1
            fi
            git clone --mirror $2 sources
            echo "GIT_REPO=sources" >.deployrc
            mkdir releases shared
            exit
        ;;
        -r)
            rollback
            exit
        ;;
        -c)
            clean $2
            exit
        ;;
        --)
            shift
            break
        ;;
        *)
            echo Unknown option
            exit 1
    esac
done

if [ ! -f ./.deployrc ]
then
    echo No .deployrc found
    exit 1
fi

. ./.deployrc

(cd $GIT_REPO; git fetch origin) || exit 1

RELEASE=$(date +%Y-%m-%d-%H-%M-%S)

if [ ! -z "$1" ]
then
    REF="$1"
else
    REF=master
fi

git clone --no-local --depth 1 --recurse-submodules --shallow-submodules --branch $REF $GIT_REPO releases/$RELEASE
find releases/$RELEASE -name .git -exec rm -rf '{}' +

do_links $RELEASE
hook extract.after $RELEASE

ln -sfn releases/$RELEASE current

hook switch.after $RELEASE
